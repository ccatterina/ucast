{"version":3,"file":"index.mjs","sources":["../../src/interpreters.ts","../../src/interpreter.ts","../../src/defaults.ts","../../src/dialects.ts"],"sourcesContent":["import {\n  Condition,\n  CompoundCondition,\n  FieldCondition,\n  Comparable\n} from '@ucast/core';\nimport { SqlOperator } from './interpreter';\n\nexport const eq: SqlOperator<FieldCondition> = (condition, query) => {\n  return query.where(condition.field, '=', condition.value);\n};\n\nexport const ne: typeof eq = (condition, query) => {\n  return query.where(condition.field, '<>', condition.value);\n};\n\nexport const lt: SqlOperator<FieldCondition<Comparable>> = (condition, query) => {\n  return query.where(condition.field, '<', condition.value);\n};\n\nexport const lte: SqlOperator<FieldCondition<Comparable>> = (condition, query) => {\n  return query.where(condition.field, '<=', condition.value);\n};\n\nexport const gt: SqlOperator<FieldCondition<Comparable>> = (condition, query) => {\n  return query.where(condition.field, '>', condition.value);\n};\n\nexport const gte: SqlOperator<FieldCondition<Comparable>> = (condition, query) => {\n  return query.where(condition.field, '>=', condition.value);\n};\n\nexport const exists: SqlOperator<FieldCondition<Comparable>> = (condition, query) => {\n  return query.whereRaw(`${query.field(condition.field)} is ${condition.value ? 'not ' : ''}null`);\n};\n\nfunction manyParamsOperator(name: string): SqlOperator<FieldCondition<unknown[]>> {\n  return (condition, query) => {\n    return query.whereRaw(\n      `${query.field(condition.field)} ${name}(${query.manyParams(condition.value).join(', ')})`,\n    );\n  };\n}\n\nexport const within = manyParamsOperator('in');\nexport const nin = manyParamsOperator('not in');\n\nexport const mod: SqlOperator<FieldCondition<[number, number]>> = (condition, query) => {\n  const params = query.manyParams(condition.value);\n  return query.whereRaw(`mod(${query.field(condition.field)}, ${params[0]}) = ${params[1]}`);\n};\n\ntype IElemMatch = SqlOperator<FieldCondition<Condition>>;\nexport const elemMatch: IElemMatch = (condition, query, { interpret }) => {\n  return query.usingFieldPrefix(condition.field, () => interpret(condition.value, query));\n};\n\nexport const regex: SqlOperator<FieldCondition<RegExp>> = (condition, query) => {\n  const sql = query.options.regexp(\n    query.field(condition.field),\n    query.param(condition.value.source),\n    condition.value.ignoreCase\n  );\n  return query.whereRaw(sql);\n};\n\nfunction compoundOperator(combinator: 'and' | 'or', isInverted: boolean = false) {\n  const childOptions = { linkParams: true };\n  return ((node, query, { interpret }) => {\n    const childQuery = query.child(childOptions);\n    node.value.forEach(condition => interpret(condition, childQuery));\n    return query.merge(childQuery, combinator, isInverted);\n  }) as SqlOperator<CompoundCondition>;\n}\n\nexport const not = compoundOperator('and', true);\nexport const and = compoundOperator('and');\nexport const or = compoundOperator('or');\nexport const nor = compoundOperator('or', true);\n","import {\n  createInterpreter,\n  Condition,\n  InterpretationContext,\n  InterpreterOptions\n} from '@ucast/core';\nimport { DialectOptions } from './dialects';\n\nexport interface SqlQueryOptions extends Required<DialectOptions> {\n  rootAlias?: string\n  foreignField?(field: string, relationName: string): string\n  localField?(field: string): string\n  joinRelation?(relationName: string, context: unknown): boolean\n}\n\ntype ChildOptions = Partial<Pick<\nSqlQueryOptions,\n'foreignField' | 'localField' | 'joinRelation'\n>> & {\n  linkParams?: boolean\n};\n\nexport class Query {\n  public readonly options!: SqlQueryOptions;\n  private _fieldPrefix!: string;\n  private _params: unknown[] = [];\n  private _sql: string[] = [];\n  private _joins = new Set<string>();\n  private _lastPlaceholderIndex: number = 1;\n  private _relationContext!: unknown;\n  private _rootAlias!: string;\n\n  constructor(options: SqlQueryOptions, fieldPrefix: string = '', relationContext?: unknown) {\n    this.options = options;\n    this._fieldPrefix = fieldPrefix;\n    this._relationContext = relationContext;\n    this._rootAlias = options.rootAlias ? `${options.escapeField(options.rootAlias)}.` : '';\n\n    if (this.options.foreignField) {\n      this._foreignField = this.options.foreignField;\n    }\n\n    if (this.options.localField) {\n      this._localField = this.options.localField;\n    }\n  }\n\n  field(rawName: string) {\n    const name = this._fieldPrefix + rawName;\n\n    if (!this.options.joinRelation) {\n      return this._rootAlias + this._localField(name);\n    }\n\n    const relationNameIndex = name.lastIndexOf('.');\n\n    if (relationNameIndex === -1) {\n      return this._rootAlias + this._localField(name);\n    }\n\n    const relationName = name.slice(0, relationNameIndex);\n    const field = name.slice(relationNameIndex + 1);\n\n    if (!this.options.joinRelation(relationName, this._relationContext)) {\n      return this._rootAlias + this._localField(name);\n    }\n\n    relationName.split('.').forEach(r => this._joins.add(r));\n\n    return this._foreignField(field, relationName);\n  }\n\n  private _localField(field: string) {\n    return this.options.escapeField(field);\n  }\n\n  private _foreignField(field: string, relationName: string) {\n    const relationLastAlias = relationName.split('.').slice(-1)[0];\n    return `${this.options.escapeField(relationLastAlias)}.${this.options.escapeField(field)}`;\n  }\n\n  param(value: unknown) {\n    const index = this._lastPlaceholderIndex + this._params.length;\n    this._params.push(value);\n    return this.options.paramPlaceholder(index);\n  }\n\n  manyParams(items: unknown[]) {\n    return items.map(item => this.param(item));\n  }\n\n  child(options?: ChildOptions) {\n    let queryOptions: SqlQueryOptions = this.options;\n    let canLinkParams = false;\n\n    if (options) {\n      const { linkParams, ...overrideOptions } = options;\n      queryOptions = { ...this.options, ...overrideOptions };\n      canLinkParams = !!linkParams;\n    }\n\n    const query = new Query(queryOptions, this._fieldPrefix, this._relationContext);\n\n    if (canLinkParams) {\n      query._params = this._params;\n      query._joins = this._joins; // TODO: investigate case of referencing relations of relations\n    } else {\n      query._lastPlaceholderIndex = this._lastPlaceholderIndex + this._params.length;\n    }\n    return query;\n  }\n\n  where(field: string, operator: string, value: unknown) {\n    return this.whereRaw(`${this.field(field)} ${operator} ${this.param(value)}`);\n  }\n\n  whereRaw(sql: string) {\n    this._sql.push(sql);\n    return this;\n  }\n\n  merge(query: Query, operator: 'and' | 'or' = 'and', isInverted: boolean = false) {\n    const sql = query._sql.join(` ${operator} `);\n\n    this._sql.push(`${isInverted ? 'not ' : ''}(${sql})`);\n\n    if (this._params !== query._params) {\n      this._params.push(...query._params);\n      for (const relation of query._joins) { // eslint-disable-line\n        this._joins.add(relation);\n      }\n    }\n    return this;\n  }\n\n  usingFieldPrefix(prefix: string, callback: () => void) {\n    const prevPrefix = this._fieldPrefix;\n\n    try {\n      this._fieldPrefix = `${prefix}.`;\n      callback();\n      return this;\n    } finally {\n      this._fieldPrefix = prevPrefix;\n    }\n  }\n\n  toJSON(): [string, unknown[], string[]] {\n    return [this._sql.join(' and '), this._params, Array.from(this._joins)];\n  }\n}\n\nexport type SqlOperator<C extends Condition> = (\n  condition: C,\n  query: Query,\n  context: InterpretationContext<SqlOperator<C>>,\n) => Query;\n\ninterface SqlInterpreterOptions {\n  getInterpreterName?: InterpreterOptions['getInterpreterName']\n}\n\nexport function createSqlInterpreter(\n  operators: Record<string, SqlOperator<any>>,\n  options?: SqlInterpreterOptions\n) {\n  const interpret = createInterpreter<SqlOperator<any>>(operators, options);\n  return (condition: Condition, sqlOptions: SqlQueryOptions, relationContext?: unknown) => {\n    return interpret(condition, new Query(sqlOptions, '', relationContext)).toJSON();\n  };\n}\n","import * as interpreters from './interpreters';\n\nexport const allInterpreters = {\n  ...interpreters,\n  in: interpreters.within,\n};\n","function posixRegex(field: string, placeholder: string, ignoreCase: boolean) {\n  const operator = ignoreCase ? '~*' : '~';\n  return `${field} ${operator} ${placeholder}`;\n}\n\nfunction regexp(field: string, placeholder: string) {\n  return `${field} regexp ${placeholder} = 1`;\n}\n\nconst questionPlaceholder = () => '?';\nconst $indexPlaceholder = (index: number) => `$${index}`;\n\nexport const oracle = {\n  regexp: posixRegex,\n  paramPlaceholder: $indexPlaceholder,\n  escapeField: (field: string) => `\"${field}\"`,\n};\nexport const pg = oracle;\n\nexport const mysql = {\n  regexp,\n  paramPlaceholder: questionPlaceholder,\n  escapeField: (field: string) => `\\`${field}\\``,\n};\nexport const sqlite = mysql;\n\nexport const mssql = {\n  regexp() {\n    throw new Error('\"regexp\" operator is not supported in MSSQL');\n  },\n  paramPlaceholder: questionPlaceholder,\n  escapeField: (field: string) => `[${field}]`,\n};\n\nexport interface DialectOptions {\n  regexp(field: string, placeholder: string, ignoreCase: boolean): string\n  escapeField(field: string, relationName?: string): string\n  paramPlaceholder(index: number): string\n}\n\nexport type SupportedDialects = 'mssql' |\n'postgres' |\n'pg' |\n'oracle' |\n'oracledb' |\n'mysql' |\n'mysql2' |\n'mariadb' |\n'sqlite3' |\n'sqlite';\ntype Dialects<V> = Record<SupportedDialects, DialectOptions & V>;\n\nexport function createDialects<T extends Partial<DialectOptions>>(options: T): Dialects<T> {\n  const mssqlOptions = {\n    ...mssql,\n    ...options,\n  };\n  const pgOptions = {\n    ...pg,\n    ...options,\n  };\n  const oracleOptions = {\n    ...oracle,\n    ...options,\n  };\n  const mysqlOptions = {\n    ...mysql,\n    ...options,\n  };\n  const sqliteOptions = {\n    ...sqlite,\n    ...options,\n  };\n\n  return {\n    mssql: mssqlOptions,\n    oracle: oracleOptions,\n    oracledb: oracleOptions,\n    pg: pgOptions,\n    postgres: pgOptions,\n    mysql: mysqlOptions,\n    mysql2: mysqlOptions,\n    mariadb: mysqlOptions,\n    sqlite: sqliteOptions,\n    sqlite3: sqliteOptions,\n  };\n}\n"],"names":["eq","condition","query","where","field","value","ne","lt","lte","gt","gte","exists","whereRaw","manyParamsOperator","name","manyParams","join","within","nin","mod","params","elemMatch","interpret","usingFieldPrefix","regex","sql","options","regexp","param","source","ignoreCase","compoundOperator","combinator","isInverted","childOptions","linkParams","node","childQuery","child","forEach","merge","not","and","or","nor","Query","constructor","fieldPrefix","relationContext","_fieldPrefix","_params","_sql","_joins","Set","_lastPlaceholderIndex","_relationContext","_rootAlias","rootAlias","escapeField","foreignField","_foreignField","localField","_localField","rawName","joinRelation","relationNameIndex","lastIndexOf","relationName","slice","split","r","add","relationLastAlias","index","length","push","paramPlaceholder","items","map","item","queryOptions","canLinkParams","overrideOptions","operator","relation","prefix","callback","prevPrefix","toJSON","Array","from","createSqlInterpreter","operators","createInterpreter","sqlOptions","allInterpreters","interpreters","in","posixRegex","placeholder","questionPlaceholder","$indexPlaceholder","oracle","pg","mysql","sqlite","mssql","Error","createDialects","mssqlOptions","pgOptions","oracleOptions","mysqlOptions","sqliteOptions","oracledb","postgres","mysql2","mariadb","sqlite3"],"mappings":"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"}