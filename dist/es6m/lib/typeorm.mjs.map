{"version":3,"file":"typeorm.mjs","sources":["../../../src/lib/typeorm.ts"],"sourcesContent":["import { Condition } from '@ucast/core';\nimport { SelectQueryBuilder } from 'typeorm';\nimport {\n  createSqlInterpreter,\n  allInterpreters,\n  SqlOperator,\n  createDialects,\n  SqlQueryOptions\n} from '../index';\n\nfunction joinRelation<Entity>(relation: string, query: SelectQueryBuilder<Entity>) {\n  const relationParts = relation.split('.');\n  let meta = query.expressionMap.mainAlias?.metadata;\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const part of relationParts) {\n    const relationData = meta?.findRelationWithPropertyPath(part);\n    if (!relationData) {\n      return false;\n    }\n    meta = relationData.inverseRelation?.entityMetadata;\n  }\n\n  relationParts.forEach((part, i) => {\n    const alias = (i > 0) ? relationParts.slice(0, i).join('_') : query.expressionMap.mainAlias?.name;\n    const nextJoinAlias = relationParts.slice(0, i + 1).join('_');\n    if (!query.expressionMap.joinAttributes.some(j => j.alias.name === nextJoinAlias)) {\n      query.leftJoin(`${alias}.${part}`, nextJoinAlias);\n    }\n  });\n  return true;\n}\n\nfunction foreignField<Entity>(field: string, relationName: string) {\n  return `${relationName.replace(/\\./g, '_')}.${field}`;\n}\n\nconst dialects = createDialects({\n  joinRelation,\n  paramPlaceholder: index => `:${index - 1}`,\n  escapeField: (field: string) => field,\n  foreignField,\n});\n\n// eslint-disable-next-line no-multi-assign\ndialects.sqlite.escapeField = dialects.sqlite3.escapeField = dialects.pg.escapeField;\n\nexport function createInterpreter(interpreters: Record<string, SqlOperator<any>>) {\n  const interpretSQL = createSqlInterpreter(interpreters);\n\n  return <Entity>(condition: Condition, query: SelectQueryBuilder<Entity>) => {\n    const dialect = query.connection.options.type as keyof typeof dialects;\n    if (!dialects[dialect]) {\n      throw new Error(`Unsupported database dialect: ${dialect}`);\n    }\n\n    const options: SqlQueryOptions = {\n      rootAlias: query.alias,\n      ...dialects[dialect],\n    };\n\n    const [sql, params] = interpretSQL(condition, options, query);\n    return query.where(sql, params);\n  };\n}\n\nexport const interpret = createInterpreter(allInterpreters);\n"],"names":["joinRelation","relation","query","relationParts","split","meta","expressionMap","mainAlias","metadata","part","relationData","findRelationWithPropertyPath","inverseRelation","entityMetadata","forEach","i","alias","slice","join","name","nextJoinAlias","joinAttributes","some","j","leftJoin","foreignField","field","relationName","replace","dialects","createDialects","paramPlaceholder","index","escapeField","sqlite","sqlite3","pg","createInterpreter","interpreters","interpretSQL","createSqlInterpreter","condition","dialect","connection","options","type","Error","rootAlias","sql","params","where","interpret","allInterpreters"],"mappings":";;AAUA,SAASA,YAAT,CAA8BC,QAA9B,EAAgDC,KAAhD,EAAmF;AACjF,QAAMC,aAAa,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAtB;AACA,MAAIC,IAAI,GAAGH,KAAK,CAACI,aAAN,CAAoBC,SAApB,EAA+BC,QAA1C,CAFiF;;AAKjF,OAAK,MAAMC,IAAX,IAAmBN,aAAnB,EAAkC;AAChC,UAAMO,YAAY,GAAGL,IAAI,EAAEM,4BAAN,CAAmCF,IAAnC,CAArB;;AACA,QAAI,CAACC,YAAL,EAAmB;AACjB,aAAO,KAAP;AACD;;AACDL,IAAAA,IAAI,GAAGK,YAAY,CAACE,eAAb,EAA8BC,cAArC;AACD;;AAEDV,EAAAA,aAAa,CAACW,OAAd,CAAsB,CAACL,IAAD,EAAOM,CAAP,KAAa;AACjC,UAAMC,KAAK,GAAID,CAAC,GAAG,CAAL,GAAUZ,aAAa,CAACc,KAAd,CAAoB,CAApB,EAAuBF,CAAvB,EAA0BG,IAA1B,CAA+B,GAA/B,CAAV,GAAgDhB,KAAK,CAACI,aAAN,CAAoBC,SAApB,EAA+BY,IAA7F;AACA,UAAMC,aAAa,GAAGjB,aAAa,CAACc,KAAd,CAAoB,CAApB,EAAuBF,CAAC,GAAG,CAA3B,EAA8BG,IAA9B,CAAmC,GAAnC,CAAtB;;AACA,QAAI,CAAChB,KAAK,CAACI,aAAN,CAAoBe,cAApB,CAAmCC,IAAnC,CAAwCC,CAAC,IAAIA,CAAC,CAACP,KAAF,CAAQG,IAAR,KAAiBC,aAA9D,CAAL,EAAmF;AACjFlB,MAAAA,KAAK,CAACsB,QAAN,CAAgB,GAAER,KAAM,IAAGP,IAAK,EAAhC,EAAmCW,aAAnC;AACD;AACF,GAND;AAOA,SAAO,IAAP;AACD;;AAED,SAASK,YAAT,CAA8BC,KAA9B,EAA6CC,YAA7C,EAAmE;AACjE,SAAQ,GAAEA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4B,GAA5B,CAAiC,IAAGF,KAAM,EAApD;AACD;;AAED,MAAMG,QAAQ,GAAGC,cAAc,CAAC;AAC9B9B,EAAAA,YAD8B;AAE9B+B,EAAAA,gBAAgB,EAAEC,KAAK,IAAK,IAAGA,KAAK,GAAG,CAAE,EAFX;AAG9BC,EAAAA,WAAW,EAAGP,KAAD,IAAmBA,KAHF;AAI9BD,EAAAA;AAJ8B,CAAD,CAA/B;;AAQAI,QAAQ,CAACK,MAAT,CAAgBD,WAAhB,GAA8BJ,QAAQ,CAACM,OAAT,CAAiBF,WAAjB,GAA+BJ,QAAQ,CAACO,EAAT,CAAYH,WAAzE;AAEO,SAASI,iBAAT,CAA2BC,YAA3B,EAA2E;AAChF,QAAMC,YAAY,GAAGC,oBAAoB,CAACF,YAAD,CAAzC;AAEA,SAAO,CAASG,SAAT,EAA+BvC,KAA/B,KAAqE;AAC1E,UAAMwC,OAAO,GAAGxC,KAAK,CAACyC,UAAN,CAAiBC,OAAjB,CAAyBC,IAAzC;;AACA,QAAI,CAAChB,QAAQ,CAACa,OAAD,CAAb,EAAwB;AACtB,YAAM,IAAII,KAAJ,CAAW,iCAAgCJ,OAAQ,EAAnD,CAAN;AACD;;AAED,UAAME,OAAwB;AAC5BG,MAAAA,SAAS,EAAE7C,KAAK,CAACc;AADW,OAEzBa,QAAQ,CAACa,OAAD,CAFiB,CAA9B;AAKA,UAAM,CAACM,GAAD,EAAMC,MAAN,IAAgBV,YAAY,CAACE,SAAD,EAAYG,OAAZ,EAAqB1C,KAArB,CAAlC;AACA,WAAOA,KAAK,CAACgD,KAAN,CAAYF,GAAZ,EAAiBC,MAAjB,CAAP;AACD,GAbD;AAcD;MAEYE,SAAS,GAAGd,iBAAiB,CAACe,eAAD;;;;"}