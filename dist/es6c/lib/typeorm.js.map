{"version":3,"file":"typeorm.js","sources":["../../../src/lib/typeorm.ts"],"sourcesContent":["import { Condition } from '@ucast/core';\nimport { SelectQueryBuilder } from 'typeorm';\nimport {\n  createSqlInterpreter,\n  allInterpreters,\n  SqlOperator,\n  createDialects,\n  SqlQueryOptions\n} from '../index';\n\nfunction joinRelation<Entity>(relation: string, query: SelectQueryBuilder<Entity>) {\n  const relationParts = relation.split('.');\n  let meta = query.expressionMap.mainAlias?.metadata;\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const part of relationParts) {\n    const relationData = meta?.findRelationWithPropertyPath(part);\n    if (!relationData) {\n      return false;\n    }\n    meta = relationData.inverseRelation?.entityMetadata;\n  }\n\n  relationParts.forEach((part, i) => {\n    const alias = (i > 0) ? relationParts[i - 1] : query.expressionMap.mainAlias?.name;\n    if (!query.expressionMap.joinAttributes.some(j => j.alias.name === part)) {\n      query.leftJoin(`${alias}.${part}`, part);\n    }\n  });\n  return true;\n}\n\nconst dialects = createDialects({\n  joinRelation,\n  paramPlaceholder: index => `:${index - 1}`\n});\n\n// eslint-disable-next-line no-multi-assign\ndialects.sqlite.escapeField = dialects.sqlite3.escapeField = dialects.pg.escapeField;\n\nexport function createInterpreter(interpreters: Record<string, SqlOperator<any>>) {\n  const interpretSQL = createSqlInterpreter(interpreters);\n\n  return <Entity>(condition: Condition, query: SelectQueryBuilder<Entity>) => {\n    const dialect = query.connection.options.type as keyof typeof dialects;\n    if (!dialects[dialect]) {\n      throw new Error(`Unsupported database dialect: ${dialect}`);\n    }\n\n    const options: SqlQueryOptions = {\n      rootAlias: query.alias,\n      ...dialects[dialect],\n    };\n\n    const [sql, params] = interpretSQL(condition, options, query);\n    return query.where(sql, params);\n  };\n}\n\nexport const interpret = createInterpreter(allInterpreters);\n"],"names":["joinRelation","relation","query","relationParts","split","meta","expressionMap","mainAlias","metadata","part","relationData","findRelationWithPropertyPath","inverseRelation","entityMetadata","forEach","i","alias","name","joinAttributes","some","j","leftJoin","dialects","createDialects","paramPlaceholder","index","sqlite","escapeField","sqlite3","pg","createInterpreter","interpreters","interpretSQL","createSqlInterpreter","condition","dialect","connection","options","type","Error","rootAlias","sql","params","where","interpret","allInterpreters"],"mappings":";;;;;;AAUA,SAASA,YAAT,CAA8BC,QAA9B,EAAgDC,KAAhD,EAAmF;AACjF,QAAMC,aAAa,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAtB;AACA,MAAIC,IAAI,GAAGH,KAAK,CAACI,aAAN,CAAoBC,SAApB,EAA+BC,QAA1C,CAFiF;;AAKjF,OAAK,MAAMC,IAAX,IAAmBN,aAAnB,EAAkC;AAChC,UAAMO,YAAY,GAAGL,IAAI,EAAEM,4BAAN,CAAmCF,IAAnC,CAArB;;AACA,QAAI,CAACC,YAAL,EAAmB;AACjB,aAAO,KAAP;AACD;;AACDL,IAAAA,IAAI,GAAGK,YAAY,CAACE,eAAb,EAA8BC,cAArC;AACD;;AAEDV,EAAAA,aAAa,CAACW,OAAd,CAAsB,CAACL,IAAD,EAAOM,CAAP,KAAa;AACjC,UAAMC,KAAK,GAAID,CAAC,GAAG,CAAL,GAAUZ,aAAa,CAACY,CAAC,GAAG,CAAL,CAAvB,GAAiCb,KAAK,CAACI,aAAN,CAAoBC,SAApB,EAA+BU,IAA9E;;AACA,QAAI,CAACf,KAAK,CAACI,aAAN,CAAoBY,cAApB,CAAmCC,IAAnC,CAAwCC,CAAC,IAAIA,CAAC,CAACJ,KAAF,CAAQC,IAAR,KAAiBR,IAA9D,CAAL,EAA0E;AACxEP,MAAAA,KAAK,CAACmB,QAAN,CAAgB,GAAEL,KAAM,IAAGP,IAAK,EAAhC,EAAmCA,IAAnC;AACD;AACF,GALD;AAMA,SAAO,IAAP;AACD;;AAED,MAAMa,QAAQ,GAAGC,oBAAc,CAAC;AAC9BvB,EAAAA,YAD8B;AAE9BwB,EAAAA,gBAAgB,EAAEC,KAAK,IAAK,IAAGA,KAAK,GAAG,CAAE;AAFX,CAAD,CAA/B;;AAMAH,QAAQ,CAACI,MAAT,CAAgBC,WAAhB,GAA8BL,QAAQ,CAACM,OAAT,CAAiBD,WAAjB,GAA+BL,QAAQ,CAACO,EAAT,CAAYF,WAAzE;AAEO,SAASG,iBAAT,CAA2BC,YAA3B,EAA2E;AAChF,QAAMC,YAAY,GAAGC,0BAAoB,CAACF,YAAD,CAAzC;AAEA,SAAO,CAASG,SAAT,EAA+BhC,KAA/B,KAAqE;AAC1E,UAAMiC,OAAO,GAAGjC,KAAK,CAACkC,UAAN,CAAiBC,OAAjB,CAAyBC,IAAzC;;AACA,QAAI,CAAChB,QAAQ,CAACa,OAAD,CAAb,EAAwB;AACtB,YAAM,IAAII,KAAJ,CAAW,iCAAgCJ,OAAQ,EAAnD,CAAN;AACD;;AAED,UAAME,OAAwB;AAC5BG,MAAAA,SAAS,EAAEtC,KAAK,CAACc;AADW,OAEzBM,QAAQ,CAACa,OAAD,CAFiB,CAA9B;AAKA,UAAM,CAACM,GAAD,EAAMC,MAAN,IAAgBV,YAAY,CAACE,SAAD,EAAYG,OAAZ,EAAqBnC,KAArB,CAAlC;AACA,WAAOA,KAAK,CAACyC,KAAN,CAAYF,GAAZ,EAAiBC,MAAjB,CAAP;AACD,GAbD;AAcD;MAEYE,SAAS,GAAGd,iBAAiB,CAACe,qBAAD;;;;;"}